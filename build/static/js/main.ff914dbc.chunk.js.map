{"version":3,"sources":["_redirects","components/Filter.js","components/Button.js","components/QuestionCard.js","components/Loader.js","components/AddQestionCard.js","components/Questions.js","firebase.js","actions/errorActions.js","actions/types.js","components/QuestionsBox.js","actions/questionActions.js","layouts/Footer.js","actions/authActions.js","components/LoginTextInput.js","components/Login.js","components/UserMenu.js","layouts/UserNavBar.js","layouts/NavBar.js","views/AccountDashboard.js","components/UsersBox.js","views/AdminDashboard.js","components/PasswordReset.js","views/AllQuestionsView.js","reducers/authReducer.js","reducers/questionReducer.js","reducers/errorReducer.js","reducers/index.js","store.js","App.js","index.js"],"names":["module","exports","Filter","state","value","showClose","onChange","e","inputs","target","split","map","el","trim","props","length","setState","resetFilter","className","type","placeholder","this","onClick","Component","Button","types","forEach","children","QuestionCard","editButtons","onDelete","onEdit","author","confirmBtns","firstName","lastName","email","onConfirm","onDiscard","discardedLabel","wasDiscarded","number","question","toUpperCase","slice","answer","keyWords","index","key","isDeletable","Loader","AddQestionCard","keyWordsString","setInputsFromProps","join","onInputChange","inputType","onKeyWordsChange","keyWordsArr","onSubmit","preventDefault","user","console","error","required","onClose","connect","auth","Questions","loader","msg","style","width","maxWidth","showLoader","questions","editedPosition","id","methods","extended","creator","onDeleteQuestion","onEditQuestion","onConfirmQuestion","onDiscardQuestion","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","database","backendFunctions","functions","returnErrors","status","payload","customStyles","content","top","left","right","bottom","marginRight","transform","QuestionsBox","defaultQuestionsPerPage","filterInput","addingQuestion","isFiltering","numOfQuestions","editMode","showModal","deletedId","onShowModal","onCloseModal","loadQuestions","history","push","uid","fetchMyReviewQuestions","isPublisher","fetchAllReviewQuestions","fetchPublicQuestions","resetEditingQuestion","resetQuestionsNum","toggleEditMode","onAddingQuestion","onEndAddQuestion","onAddedQuestion","updateQuestion","createReviewQuestion","createPublicQuestion","log","deleteQuestion","onEditedQuestion","find","loadMoreQuestions","oldQuestionsNum","onFilterChange","input","isFetching","questionsToRender","filter","flag","keyWord","toLowerCase","includes","addQuestionCard","questionsRender","btns","splice","isOpen","contentLabel","overlayClassName","onRequestClose","items","isAuthenticated","isAdmin","dispatch","ref","orderByChild","once","then","data","val","newQuestions","counter","catch","err","message","code","databaseName","remove","equalTo","addToCurrItems","newQuestionRef","set","reviewer","createdAt","Date","now","newQuestion","dataToUpdate","update","Footer","href","rel","deleteUser","delete","LoginTextInput","classType","name","htmlFor","label","icon","Login","register","password","city","onChangeFormType","registerUser","loginUser","title","inputFields","loading","isLoading","errorMsg","signInWithEmailAndPassword","cred","userData","createUserWithEmailAndPassword","withRouter","logOut","signOut","window","innerWidth","location","pathname","NavBar","showUserMenu","sticked","changeIcon","hideUserMenu","userMenu","rightCorner","to","textDecoration","isAuth","onMouseEnter","onMouseLeave","AccountDashboard","showMessage","modalMessage","edited","saveChanges","updateUser","toggleModal","togg","mode","show","updateEmail","Error","Modal","setAppElement","UsersBox","defaultUsersPerPage","users","numOfUsers","currentUser","upgrading","loadMoreUsres","oldUsersNum","resetUsersNum","onDeleteUser","alert","onDowngradeUser","removeAdmin","removePublisher","onUpgradeUser","addAdmin","addPublisher","onConfirmUpgradeUser","onConfirmDowngradeUser","on","newUsers","newUser","phone","off","usersToRender","myEmail","httpsCallable","AdminDashboard","PasswordReset","passFirst","passSecond","changePassword","redirect","newPassword","newPasswordConf","callback","updatePassword","AllQuestionsView","onAuthStateChanged","loadUser","path","component","render","exact","getIdTokenResult","idTokenResult","claims","admin","publisher","initialState","item","combineReducers","action","newItems","newItemIndex","findIndex","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ff914dbc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/_redirects.67ec2587.bin\";","import React, { Component } from 'react';\r\nimport { GoSearch } from 'react-icons/go';\r\nimport { MdClose } from 'react-icons/md';\r\n\r\nexport class Filter extends Component {\r\n    state = {\r\n        value: '',\r\n        showClose: false\r\n    };\r\n\r\n    onChange = e => {\r\n        const inputs = e.target.value.split(',').map(el => el.trim());\r\n        this.props.onChange(inputs);\r\n        if (e.target.value.length > 1) this.setState({ value: e.target.value, showClose: true });\r\n        else this.setState({ value: e.target.value, showClose: false });\r\n    };\r\n\r\n    resetFilter = () => {\r\n        this.setState({ value: '', showClose: false });\r\n        this.props.onChange([]);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"filter\">\r\n                <div className=\"filter__text\">\r\n                    <GoSearch className=\"filter__icon\" />{' '}\r\n                    <span className=\"filter__text--txt\">Szukaj! </span>\r\n                </div>\r\n                <input\r\n                    className=\"filter__input js--filter-input\"\r\n                    type=\"text\"\r\n                    placeholder={this.props.placeholder}\r\n                    onChange={this.onChange}\r\n                    value={this.state.value}\r\n                />\r\n                {this.state.showClose ? (\r\n                    <MdClose className=\"filter__close\" onClick={this.resetFilter} />\r\n                ) : null}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Filter;\r\n","import React from 'react';\r\n\r\nconst Button = props => {\r\n    let className = 'btn ';\r\n    if (props.className) className += props.className + ' ';\r\n    if (props.type) className += 'btn--' + props.type + ' ';\r\n    if (props.types)\r\n        props.types.forEach(type => {\r\n            className += 'btn--' + type + ' ';\r\n        });\r\n\r\n    return (\r\n        <button onClick={props.onClick} className={className}>\r\n            {props.children}\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default Button;\r\n","import React, { Fragment } from 'react';\r\nimport { MdSettings } from 'react-icons/md';\r\nimport { MdDeleteForever } from 'react-icons/md';\r\n\r\nconst QuestionCard = props => {\r\n    const editButtons = (\r\n        <Fragment>\r\n            <button className=\"question-card__delete-btn\" onClick={props.onDelete}>\r\n                <MdDeleteForever className=\"question-card__delete-icon\" />\r\n            </button>\r\n            <button className=\"question-card__edit-btn\" onClick={props.onEdit}>\r\n                <MdSettings />\r\n            </button>\r\n        </Fragment>\r\n    );\r\n\r\n    let author = null;\r\n    let confirmBtns = null;\r\n    if (props.author) {\r\n        author = (\r\n            <h3 className=\"question-card__author\">\r\n                Autor:&nbsp;&nbsp;\r\n                {props.author.firstName +\r\n                    ' ' +\r\n                    props.author.lastName +\r\n                    ' (' +\r\n                    props.author.email +\r\n                    ')'}\r\n            </h3>\r\n        );\r\n        confirmBtns = (\r\n            <div className=\"question-card__confirm-btns\">\r\n                <button className=\"question-card__confirm-btn\" onClick={props.onConfirm}>\r\n                    Zatwierdź\r\n                </button>\r\n                <button\r\n                    onClick={props.onDiscard}\r\n                    className=\"question-card__confirm-btn question-card__confirm-btn--delete\"\r\n                >\r\n                    Odrzuć\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    let discardedLabel = null;\r\n    if (props.wasDiscarded)\r\n        discardedLabel = <div className=\"question-card__discarded\">Odrzucono</div>;\r\n\r\n    return (\r\n        <div className=\"question-card\">\r\n            {author}\r\n            <h2\r\n                className={`question-card__title ${\r\n                    props.wasDiscarded ? 'question-card__title--discarded' : ''\r\n                }`}\r\n            >\r\n                {props.number ? props.number + '. ' : null}\r\n                {props.question.length\r\n                    ? props.question[0].toUpperCase() + props.question.slice(1)\r\n                    : '---'}\r\n            </h2>\r\n            <p className=\"question-card__answer\">{props.answer}</p>\r\n            <div className=\"question-card__key-words-title\">Słowa kluczowe:</div>\r\n            <div className=\"question-card__key-words\">\r\n                {props.keyWords && props.keyWords.map && props.keyWords.length > 0 ? (\r\n                    props.keyWords.map((el, index) => {\r\n                        if (!el || el.length < 1) return null;\r\n                        return (\r\n                            <div key={el + '' + index} className=\"question-card__key-word\">\r\n                                {el}\r\n                            </div>\r\n                        );\r\n                    })\r\n                ) : (\r\n                    <div className=\"question-card__key-word--default\">Brak słów kluczowych</div>\r\n                )}\r\n            </div>\r\n            {props.isDeletable ? editButtons : null}\r\n            {confirmBtns}\r\n            {discardedLabel}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default QuestionCard;\r\n","import React from 'react';\r\n\r\nexport const Loader = () => {\r\n    return (\r\n        <div className=\"lds-ring\">\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n        </div>\r\n    );\r\n};\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nexport class AddQestionCard extends Component {\r\n    state = {\r\n        question: '',\r\n        answer: '',\r\n        keyWordsString: '',\r\n        keyWords: []\r\n    };\r\n\r\n    setInputsFromProps = () => {\r\n        this.setState({\r\n            question: this.props.question || '',\r\n            answer: this.props.answer || '',\r\n            keyWordsString: this.props.keyWords\r\n                ? this.props.keyWords.join\r\n                    ? this.props.keyWords.join(',')\r\n                    : ''\r\n                : '',\r\n            keyWords: this.props.keyWords || []\r\n        });\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.setInputsFromProps();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (\r\n            !this.state.question &&\r\n            !this.state.answer &&\r\n            !this.state.keyWordsString &&\r\n            (this.props.question || this.props.answer || this.props.keyWords)\r\n        )\r\n            this.setInputsFromProps();\r\n    }\r\n\r\n    onInputChange = (e, inputType) => {\r\n        this.setState({ [inputType]: e.target.value });\r\n    };\r\n\r\n    onKeyWordsChange = e => {\r\n        const keyWordsArr = e.target.value.split(',').map(el => el.trim());\r\n        this.setState({\r\n            keyWordsString: e.target.value,\r\n            keyWords: keyWordsArr\r\n        });\r\n    };\r\n\r\n    onSubmit = e => {\r\n        e.preventDefault();\r\n        if (!this.props.user) {\r\n            console.error('Cant send question if not logged in!');\r\n            return;\r\n        }\r\n        const question = {\r\n            question: this.state.question,\r\n            answer: this.state.answer,\r\n            keyWords: this.state.keyWords\r\n        };\r\n\r\n        this.props.onSubmit(question);\r\n    };\r\n\r\n    render() {\r\n        let author = null;\r\n        if (this.props.author) {\r\n            author = (\r\n                <h3 className=\"question-card__author question-card__author--big\">\r\n                    Autor:&nbsp;&nbsp;\r\n                    {this.props.author.firstName +\r\n                        ' ' +\r\n                        this.props.author.lastName +\r\n                        ' (' +\r\n                        this.props.author.email +\r\n                        ')'}\r\n                </h3>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <form className=\"question-card\" onSubmit={this.onSubmit}>\r\n                {author}\r\n                <textarea\r\n                    className=\"question-card__title question-card__title--input\"\r\n                    placeholder=\"Treść pytania...\"\r\n                    value={this.state.question}\r\n                    onChange={e => this.onInputChange(e, 'question')}\r\n                    required\r\n                />\r\n                <textarea\r\n                    className=\"question-card__answer question-card__answer--input\"\r\n                    placeholder=\"Treść odpowiedzi...\"\r\n                    value={this.state.answer}\r\n                    onChange={e => this.onInputChange(e, 'answer')}\r\n                    required\r\n                />\r\n                <div className=\"question-card__key-words-title\">Słowa kluczowe:</div>\r\n                <textarea\r\n                    className=\"question-card__key-words question-card__key-words--input\"\r\n                    placeholder=\"Słowa kluczowe oddzielone przecinkami\"\r\n                    onChange={this.onKeyWordsChange}\r\n                    value={this.state.keyWordsString}\r\n                />\r\n                <button className=\"question-card__btn\" type=\"submit\">\r\n                    Wyślij!\r\n                </button>\r\n                <button className=\"question-card__delete-btn\" onClick={this.props.onClose}>\r\n                    <div></div>\r\n                </button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(AddQestionCard);\r\n","import React from 'react';\r\nimport QuestionCard from './QuestionCard';\r\nimport { Loader } from './Loader';\r\nimport AddQestionCard from './AddQestionCard';\r\n\r\nconst Questions = props => {\r\n    const loader = (\r\n        <span className=\"u-centered\">\r\n            <Loader />\r\n        </span>\r\n    );\r\n\r\n    let msg = <h3 className=\"u-centered\">Nie znaleziono żadnych pytań.</h3>;\r\n    if (props.type === 'private')\r\n        msg = (\r\n            <h3 className=\"u-centered\" style={{ width: '90%', maxWidth: '90rem' }}>\r\n                Nie znaleziono żadnych pytań. Jeśli dodałeś/aś pytanie, i nie możesz go znaleźć,\r\n                prawdopodobnie zostało usunięte lub zatwierdzone przez recenzenta.{' '}\r\n            </h3>\r\n        );\r\n\r\n    return (\r\n        <div className=\"questions-container\">\r\n            {/* {props.questions.length === 0 ? (props.showLoader ? loader : msg) : null} */}\r\n            {props.showLoader\r\n                ? loader\r\n                : props.questions.length === 0\r\n                ? msg\r\n                : props.questions.map((el, index) => {\r\n                      if (props.editedPosition === index) {\r\n                          return (\r\n                              <AddQestionCard\r\n                                  question={el.question}\r\n                                  answer={el.answer}\r\n                                  keyWords={el.keyWords}\r\n                                  key={el.id}\r\n                                  onClose={props.methods.onClose}\r\n                                  onSubmit={question => props.methods.onSubmit(question, el.id)}\r\n                                  author={props.extended ? el.creator : null}\r\n                              />\r\n                          );\r\n                      }\r\n                      if (props.extended) {\r\n                          if (el.wasDiscarded) return null;\r\n                          return (\r\n                              <QuestionCard\r\n                                  key={el.id}\r\n                                  id={el.id}\r\n                                  question={el.question}\r\n                                  answer={el.answer}\r\n                                  keyWords={el.keyWords}\r\n                                  onDelete={() => props.onDeleteQuestion(el.id)}\r\n                                  onEdit={() => props.onEditQuestion(index)}\r\n                                  onConfirm={() => props.onConfirmQuestion(el.id)}\r\n                                  onDiscard={() => props.onDiscardQuestion(el.id)}\r\n                                  isDeletable={el.isDeletable !== false}\r\n                                  author={el.creator}\r\n                                  number={el.number}\r\n                              />\r\n                          );\r\n                      }\r\n                      return (\r\n                          <QuestionCard\r\n                              key={el.id}\r\n                              id={el.id}\r\n                              question={el.question}\r\n                              answer={el.answer}\r\n                              keyWords={el.keyWords}\r\n                              onDelete={() => props.onDeleteQuestion(el.id)}\r\n                              onEdit={() => props.onEditQuestion(index)}\r\n                              isDeletable={el.isDeletable !== false}\r\n                              wasDiscarded={el.wasDiscarded}\r\n                              number={el.number}\r\n                          />\r\n                      );\r\n                  })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Questions;\r\n","import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\nimport 'firebase/auth';\r\nimport 'firebase/functions';\r\n\r\n// FIREBASE config\r\nvar firebaseConfig = {\r\n    apiKey: 'AIzaSyAwlN24oXYrAEceYn1XB3fpAHi5cEFqzNw',\r\n    authDomain: 'baza-pytan.firebaseapp.com',\r\n    databaseURL: 'https://baza-pytan.firebaseio.com',\r\n    projectId: 'baza-pytan',\r\n    storageBucket: 'baza-pytan.appspot.com',\r\n    messagingSenderId: '361765519780',\r\n    appId: '1:361765519780:web:18b81c5a7f7f3257d6c131'\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n// The start method will wait until the DOM is loaded.\r\n// ui.start('#firebaseui-auth-container', uiConfig);\r\n\r\nexport const database = firebase.database();\r\nexport const auth = firebase.auth();\r\nexport const backendFunctions = firebase.functions();\r\n","import { GET_ERRORS, CLEAR_ERRORS } from '../actions/types';\r\n\r\nexport const returnErrors = (msg, status) => {\r\n    return {\r\n        type: GET_ERRORS,\r\n        payload: { msg, status }\r\n    };\r\n};\r\n\r\nexport const clearErrors = () => {\r\n    return {\r\n        type: CLEAR_ERRORS\r\n    };\r\n};\r\n","export const FETCH_QUESTIONS = 'FETCH_QUESTIONS';\r\nexport const NEW_PRIVATE_QUESTION = 'NEW_PRIVATE_QUESTION';\r\nexport const NEW_PUBLIC_QUESTION = 'NEW_PUBLIC_QUESTION';\r\nexport const DELETE_QUESTION = 'DELETE_QUESTION';\r\nexport const UPDATE_QUESTION = 'UPDATE_QUESTION';\r\nexport const QUESTION_ERROR = 'QUESTION_ERROR';\r\nexport const QUESTIONS_LOADING = 'QUESTIONS_LOADING';\r\n\r\nexport const USER_LOADING = 'USER_LOADING';\r\nexport const USER_LOADED = 'USER_LOADED';\r\nexport const USER_UPDATED = 'USER_UPDATED';\r\nexport const AUTH_ERROR = 'AUTH_ERROR';\r\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\r\nexport const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\r\nexport const REGISTER_SUCCESS = 'REGISTER_SUCCESS';\r\nexport const REGISTER_FAIL = 'REGISTER_FAIL';\r\nexport const ADMIN_LOADED = 'ADMIN_LOADED';\r\nexport const ADMIN_FAIL = 'ADMIN_FAIL';\r\nexport const PUBLISHER_LOADED = 'PUBLISHER_LOADED';\r\nexport const PUBLISHER_FAIL = 'PUBLISHER_FAIL';\r\nexport const UPDATING_PASSWORD = 'UPDATING_PASSWORD';\r\nexport const UPDATED_PASSWORD = 'UPDATED_PASSWORD';\r\n\r\nexport const GET_ERRORS = 'GET_ERRORS';\r\nexport const CLEAR_ERRORS = 'CLEAR_ERRORS';\r\n","import React, { Component, Fragment } from 'react';\r\nimport Filrer from './Filter';\r\nimport Button from './Button';\r\nimport Questions from './Questions';\r\nimport AddQestionCard from './AddQestionCard';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    fetchPublicQuestions,\r\n    fetchMyReviewQuestions,\r\n    deleteQuestion,\r\n    fetchAllReviewQuestions,\r\n    createPublicQuestion,\r\n    createReviewQuestion,\r\n    updateQuestion\r\n} from '../actions/questionActions';\r\nimport Modal from 'react-modal';\r\nimport { FiAlertTriangle } from 'react-icons/fi';\r\n\r\nconst customStyles = {\r\n    content: {\r\n        top: '50%',\r\n        left: '50%',\r\n        right: 'auto',\r\n        bottom: 'auto',\r\n        marginRight: '-50%',\r\n        transform: 'translate(-50%, -50%)'\r\n    }\r\n};\r\n\r\nexport class QuestionsBox extends Component {\r\n    defaultQuestionsPerPage = 4;\r\n\r\n    state = {\r\n        filterInput: [],\r\n        addingQuestion: false,\r\n        isFiltering: true,\r\n        numOfQuestions: this.defaultQuestionsPerPage,\r\n        type: 'public',\r\n        editedPosition: null,\r\n        editMode: false,\r\n        showModal: false,\r\n        deletedId: null\r\n    };\r\n\r\n    // COMPONENT LIFECYCLE\r\n\r\n    componentDidMount() {\r\n        this.loadQuestions(this.props.type);\r\n        if (this.props.type) this.setState({ type: this.props.type });\r\n        // DELETE THIS\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.type !== this.state.type) {\r\n            this.setState({ type: this.props.type, isFiltering: this.props.isFetching });\r\n            this.loadQuestions(this.props.type);\r\n            this.resetEditingQuestion();\r\n        } else {\r\n            if (this.state.isFiltering !== this.props.isFetching)\r\n                this.setState({ isFiltering: this.props.isFetching });\r\n        }\r\n    }\r\n\r\n    // MODAL\r\n    onShowModal = id => {\r\n        this.setState({ showModal: true, deletedId: id });\r\n    };\r\n\r\n    onCloseModal = () => {\r\n        this.setState({ showModal: false, deletedId: null });\r\n    };\r\n\r\n    // FETCHING QUESTIONS\r\n\r\n    loadQuestions = type => {\r\n        switch (type) {\r\n            case 'private':\r\n                if (!this.props.user) {\r\n                    this.props.history.push('/');\r\n                    return;\r\n                }\r\n                if (this.props.user.uid) this.props.fetchMyReviewQuestions(this.props.user.uid);\r\n                break;\r\n            case 'review':\r\n                if (!this.props.user || !this.props.isPublisher) {\r\n                    this.props.history.push('/');\r\n                    return;\r\n                }\r\n                this.props.fetchAllReviewQuestions();\r\n                break;\r\n            default:\r\n                this.props.fetchPublicQuestions();\r\n        }\r\n        this.resetEditingQuestion();\r\n        this.resetQuestionsNum();\r\n    };\r\n\r\n    // ADDING, EDITING, DELETEING NEW QUESTION\r\n\r\n    toggleEditMode = () => {\r\n        this.setState({ editMode: !this.state.editMode });\r\n    };\r\n\r\n    onAddingQuestion = () => {\r\n        this.setState({ addingQuestion: true });\r\n    };\r\n\r\n    onEndAddQuestion = () => {\r\n        this.setState({ addingQuestion: false });\r\n    };\r\n\r\n    onAddedQuestion = (question, id = null) => {\r\n        if (!this.props.user || !this.props.user.uid) return;\r\n        if (this.state.type === 'private') {\r\n            !id\r\n                ? this.props.createReviewQuestion(question, this.props.user)\r\n                : this.props.updateQuestion(id, 'reviewQuestions', {\r\n                      ...question,\r\n                      wasDiscarded: false\r\n                  });\r\n        } else if (this.state.type === 'review') {\r\n            this.props.updateQuestion(id, 'reviewQuestions', question);\r\n        } else {\r\n            !id\r\n                ? this.props.createPublicQuestion(question, this.props.user)\r\n                : this.props.updateQuestion(id, 'publicQuestions', question);\r\n        }\r\n        this.onEndAddQuestion();\r\n        this.resetEditingQuestion();\r\n    };\r\n\r\n    onDeleteQuestion = id => {\r\n        console.log(id);\r\n        switch (this.state.type) {\r\n            case 'private':\r\n                this.props.deleteQuestion(id, 'reviewQuestions');\r\n                break;\r\n            case 'review':\r\n                if (!this.props.isPublisher) return;\r\n                this.props.deleteQuestion(id, 'reviewQuestions');\r\n                break;\r\n            default:\r\n                if (!this.props.isPublisher) return;\r\n                this.props.deleteQuestion(id, 'publicQuestions');\r\n        }\r\n        this.onCloseModal();\r\n    };\r\n\r\n    onEditedQuestion = index => {\r\n        //const position = this.props.questions.findIndex(el => el.id === id);\r\n        this.setState({ editedPosition: index });\r\n    };\r\n\r\n    resetEditingQuestion = () => {\r\n        this.setState({ editedPosition: null });\r\n    };\r\n\r\n    // REVIEW MODE - CONFIRMING QUESTION\r\n\r\n    onConfirmQuestion = id => {\r\n        if (!this.props.user) {\r\n            console.error('Cannot add public question if not a reviewer!');\r\n            return;\r\n        }\r\n        const question = this.props.questions.find(el => el.id === id);\r\n        this.props.deleteQuestion(id, 'reviewQuestions');\r\n        this.props.createPublicQuestion(question, this.props.user, false);\r\n        this.onEndAddQuestion();\r\n        this.resetEditingQuestion();\r\n    };\r\n\r\n    onDiscardQuestion = id => {\r\n        if (!this.props.user) {\r\n            console.error('Cannot add public question if not a reviewer!');\r\n            return;\r\n        }\r\n        this.props.updateQuestion(id, 'reviewQuestions', { wasDiscarded: true });\r\n        this.onEndAddQuestion();\r\n        this.resetEditingQuestion();\r\n    };\r\n\r\n    // DISPLAYING PROPER NUMBER OF QUESTIONS\r\n\r\n    loadMoreQuestions = () => {\r\n        const oldQuestionsNum = this.state.numOfQuestions;\r\n        this.setState({ numOfQuestions: oldQuestionsNum + 3 });\r\n    };\r\n\r\n    resetQuestionsNum = () => {\r\n        if (this.state.numOfQuestions !== this.defaultQuestionsPerPage)\r\n            this.setState({ numOfQuestions: this.defaultQuestionsPerPage });\r\n    };\r\n\r\n    // FILTERING\r\n\r\n    onFilterChange = input => {\r\n        if (input.length && input[0].length > 0) {\r\n            this.setState({\r\n                filterInput: input,\r\n                isFiltering: true,\r\n                numOfQuestions: this.defaultQuestionsPerPage\r\n            });\r\n            return;\r\n        }\r\n        this.setState({\r\n            filterInput: input,\r\n            isFiltering: false,\r\n            numOfQuestions: this.defaultQuestionsPerPage\r\n        });\r\n    };\r\n\r\n    render() {\r\n        // FILTERING QUESTIONS\r\n        let questionsToRender = this.props.questions.filter(el => {\r\n            if (this.state.filterInput.length === 0) return true;\r\n            if (this.state.filterInput[0].length < 1) return true;\r\n            let flag = false;\r\n            if (el.keyWords && el.keyWords.forEach)\r\n                el.keyWords.forEach(keyWord => {\r\n                    this.state.filterInput.forEach(key => {\r\n                        if (keyWord.toLowerCase().includes(key.toLowerCase()) && key.length > 0)\r\n                            flag = true;\r\n                    });\r\n                });\r\n            this.state.filterInput.forEach(key => {\r\n                if (\r\n                    el.question &&\r\n                    el.question.toLowerCase().includes(key.toLowerCase()) &&\r\n                    key.length > 0\r\n                )\r\n                    flag = true;\r\n                if (el.number && key.toLowerCase() === el.number + '') flag = true;\r\n            });\r\n\r\n            return flag;\r\n        });\r\n\r\n        // IF USER IS ADDING QUESTION\r\n        let addQuestionCard = null;\r\n        if (this.state.addingQuestion) {\r\n            addQuestionCard = (\r\n                <AddQestionCard onClose={this.onEndAddQuestion} onSubmit={this.onAddedQuestion} />\r\n            );\r\n        }\r\n\r\n        if (this.state.editMode)\r\n            questionsToRender = questionsToRender.map(el => ({ ...el, isDeletable: true }));\r\n\r\n        // Mapping objects into components\r\n        let questionsRender = (\r\n            <Questions\r\n                questions={questionsToRender}\r\n                onDeleteQuestion={this.onShowModal}\r\n                onEditQuestion={this.onEditedQuestion}\r\n                showLoader={this.state.isFiltering}\r\n                extended={this.props.type === 'review'}\r\n                onConfirmQuestion={\r\n                    this.props.type === 'review'\r\n                        ? this.onConfirmQuestion\r\n                        : () => {\r\n                              console.error('Cant confirm question if not in reviews mode');\r\n                          }\r\n                }\r\n                onDiscardQuestion={\r\n                    this.props.type === 'review'\r\n                        ? this.onDiscardQuestion\r\n                        : () => {\r\n                              console.error('Cant discard question if not in reviews mode');\r\n                          }\r\n                }\r\n                type={this.props.type}\r\n            />\r\n        );\r\n        if (this.state.editedPosition || this.state.editedPosition === 0) {\r\n            questionsRender = (\r\n                <Questions\r\n                    questions={questionsToRender}\r\n                    onDeleteQuestion={this.onShowModal}\r\n                    onEditQuestion={this.onEditedQuestion}\r\n                    showLoader={this.state.isFiltering}\r\n                    editedPosition={this.state.editedPosition}\r\n                    methods={{\r\n                        onClose: this.resetEditingQuestion,\r\n                        onSubmit: this.onAddedQuestion\r\n                    }}\r\n                    extended={this.props.type === 'review'}\r\n                    onConfirmQuestion={\r\n                        this.props.type === 'review'\r\n                            ? this.onConfirmQuestion\r\n                            : () => {\r\n                                  console.error('Cant confirm question if not in reviews mode');\r\n                              }\r\n                    }\r\n                    onDiscardQuestion={\r\n                        this.props.type === 'review'\r\n                            ? this.onDiscardQuestion\r\n                            : () => {\r\n                                  console.error('Cant discard question if not in reviews mode');\r\n                              }\r\n                    }\r\n                    type={this.props.type}\r\n                />\r\n            );\r\n        }\r\n        let btns = (\r\n            <Button\r\n                onClick={\r\n                    this.state.numOfQuestions >= questionsToRender.length\r\n                        ? () => {}\r\n                        : this.loadMoreQuestions\r\n                }\r\n                className={this.state.numOfQuestions >= questionsToRender.length ? 'btn--grey' : ''}\r\n            >\r\n                Załaduj więcej pytań\r\n            </Button>\r\n        );\r\n        if (this.state.type === 'private')\r\n            btns = (\r\n                <div className=\"questions-box__btns\">\r\n                    <Button onClick={this.onAddingQuestion}>Dodaj pytanie</Button>\r\n                    <Button\r\n                        onClick={\r\n                            this.state.numOfQuestions >= questionsToRender.length\r\n                                ? () => {}\r\n                                : this.loadMoreQuestions\r\n                        }\r\n                        className={\r\n                            this.state.numOfQuestions >= questionsToRender.length ? 'btn--grey' : ''\r\n                        }\r\n                    >\r\n                        Załaduj więcej pytań\r\n                    </Button>\r\n                </div>\r\n            );\r\n        else if (this.state.type !== 'review' && this.props.isPublisher) {\r\n            btns = (\r\n                <div className=\"questions-box__btns\">\r\n                    <Button onClick={() => this.toggleEditMode()}>\r\n                        {this.state.editMode ? 'Wyłącz ' : 'Włącz '}tryb edycji\r\n                    </Button>\r\n                    <Button onClick={this.onAddingQuestion}>Dodaj pytanie</Button>\r\n                    <Button\r\n                        onClick={\r\n                            this.state.numOfQuestions >= questionsToRender.length\r\n                                ? () => {}\r\n                                : this.loadMoreQuestions\r\n                        }\r\n                        className={\r\n                            this.state.numOfQuestions >= questionsToRender.length ? 'btn--grey' : ''\r\n                        }\r\n                    >\r\n                        Załaduj więcej pytań\r\n                    </Button>\r\n                </div>\r\n            );\r\n        }\r\n        if (questionsToRender && questionsToRender.length > this.state.numOfQuestions) {\r\n            questionsToRender.splice(this.state.numOfQuestions);\r\n        }\r\n\r\n        return (\r\n            <Fragment>\r\n                {/* <h1 className=\"heading-primary js--heading\">Baza pytań</h1> */}\r\n                <Filrer\r\n                    placeholder=\"Szukaj pytań po słowach kluczowych...\"\r\n                    onChange={this.onFilterChange}\r\n                />\r\n                {questionsRender}\r\n                {addQuestionCard}\r\n                {btns}\r\n\r\n                <Modal\r\n                    isOpen={this.state.showModal}\r\n                    style={customStyles}\r\n                    contentLabel=\"Example Modal\"\r\n                    overlayClassName=\"modal__overlay\"\r\n                    onRequestClose={this.onCloseModal}\r\n                >\r\n                    <div className=\"modal__window\">\r\n                        <div className=\"modal__icon-box\">\r\n                            <FiAlertTriangle className=\"modal__icon\" />\r\n                        </div>\r\n                        <h2 className=\"modal__msg\">Czy na pewno chcesz usunąć pytanie?</h2>\r\n                        <h3 className=\"modal__msg--small\">Tej operacji nie można cofnąć.</h3>\r\n                        <div className=\"modal__btns\">\r\n                            <Button\r\n                                types={['confirm', 'short']}\r\n                                onClick={() => this.onDeleteQuestion(this.state.deletedId)}\r\n                            >\r\n                                Tak\r\n                            </Button>\r\n                            <Button types={['delete', 'short']} onClick={this.onCloseModal}>\r\n                                Anuluj\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                </Modal>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    questions: state.questions.items,\r\n    isAuthenticated: state.auth.isAuthenticated,\r\n    user: state.auth.user,\r\n    isPublisher: state.auth.isPublisher,\r\n    isAdmin: state.auth.isAdmin,\r\n    isFetching: state.questions.isFetching\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    fetchPublicQuestions,\r\n    deleteQuestion,\r\n    fetchMyReviewQuestions,\r\n    fetchAllReviewQuestions,\r\n    createPublicQuestion,\r\n    createReviewQuestion,\r\n    updateQuestion\r\n})(QuestionsBox);\r\n","import {\r\n    FETCH_QUESTIONS,\r\n    NEW_PRIVATE_QUESTION,\r\n    DELETE_QUESTION,\r\n    QUESTION_ERROR,\r\n    NEW_PUBLIC_QUESTION,\r\n    UPDATE_QUESTION,\r\n    QUESTIONS_LOADING\r\n} from './types';\r\nimport { database } from '../firebase';\r\nimport { returnErrors } from '../actions/errorActions';\r\n\r\nexport const fetchPublicQuestions = () => dispatch => {\r\n    dispatch({\r\n        type: QUESTIONS_LOADING\r\n    });\r\n    database\r\n        .ref('publicQuestions')\r\n        .orderByChild('createdAt')\r\n        .once('value')\r\n        .then(data => data.val())\r\n        .then(questions => {\r\n            const newQuestions = [];\r\n            let counter = 0;\r\n            for (let question in questions) {\r\n                newQuestions.push({\r\n                    ...questions[question],\r\n                    id: question,\r\n                    isDeletable: false,\r\n                    number: ++counter\r\n                });\r\n            }\r\n            dispatch({\r\n                type: FETCH_QUESTIONS,\r\n                payload: newQuestions\r\n            });\r\n        })\r\n        .catch(err => {\r\n            dispatch(returnErrors(err.message, err.code));\r\n            dispatch({\r\n                type: QUESTION_ERROR\r\n            });\r\n        });\r\n};\r\n\r\nexport const fetchMyReviewQuestions = uid => dispatch => {\r\n    dispatch({\r\n        type: QUESTIONS_LOADING\r\n    });\r\n    if (!uid) {\r\n        console.error('Getting questions without beeing authenticated!');\r\n        return;\r\n    }\r\n    database\r\n        .ref('reviewQuestions')\r\n        .orderByChild('uid')\r\n        .equalTo(uid)\r\n        .once('value')\r\n        .then(data => data.val())\r\n        .then(questions => {\r\n            const newQuestions = [];\r\n            for (let question in questions) {\r\n                newQuestions.push({\r\n                    ...questions[question],\r\n                    id: question,\r\n                    isDeletable: true\r\n                });\r\n            }\r\n            dispatch({\r\n                type: FETCH_QUESTIONS,\r\n                payload: newQuestions\r\n            });\r\n        })\r\n        .catch(err => {\r\n            dispatch(returnErrors(err.message, err.code));\r\n            dispatch({\r\n                type: QUESTION_ERROR\r\n            });\r\n        });\r\n};\r\n\r\nexport const fetchAllReviewQuestions = () => dispatch => {\r\n    dispatch({\r\n        type: QUESTIONS_LOADING\r\n    });\r\n\r\n    database\r\n        .ref('reviewQuestions')\r\n        .once('value')\r\n        .then(data => data.val())\r\n        .then(questions => {\r\n            const newQuestions = [];\r\n            for (let question in questions) {\r\n                newQuestions.push({\r\n                    ...questions[question],\r\n                    id: question,\r\n                    isDeletable: true\r\n                });\r\n            }\r\n            dispatch({\r\n                type: FETCH_QUESTIONS,\r\n                payload: newQuestions\r\n            });\r\n        })\r\n        .catch(err => {\r\n            dispatch(returnErrors(err.message, err.code));\r\n            dispatch({\r\n                type: QUESTION_ERROR\r\n            });\r\n        });\r\n};\r\n\r\nexport const createReviewQuestion = (question, user) => dispatch => {\r\n    dispatch({\r\n        type: QUESTIONS_LOADING\r\n    });\r\n    const newQuestionRef = database.ref('reviewQuestions').push();\r\n    newQuestionRef\r\n        .set({\r\n            question: question.question,\r\n            answer: question.answer,\r\n            keyWords: question.keyWords || [],\r\n            uid: user.uid,\r\n            creator: {\r\n                firstName: user.firstName || 'Brak informacji',\r\n                lastName: user.lastName || 'Brak informacji',\r\n                email: user.email || 'Nie podano'\r\n            },\r\n            createdAt: Date.now()\r\n        })\r\n        .then(data => {\r\n            const newQuestion = { ...question };\r\n            newQuestion.id = newQuestionRef.key;\r\n            dispatch({\r\n                type: NEW_PRIVATE_QUESTION,\r\n                payload: newQuestion\r\n            });\r\n        })\r\n        .catch(err => {\r\n            dispatch(returnErrors(err.message, err.code));\r\n            dispatch({\r\n                type: QUESTION_ERROR\r\n            });\r\n        });\r\n};\r\n\r\nexport const createPublicQuestion = (question, user, addToCurrItems = true) => dispatch => {\r\n    // dispatch({\r\n    //     type: QUESTIONS_LOADING\r\n    // });\r\n    if (!question.id) console.error('CANT MAKE QUESTION PUBLIC WITHOUT ITS ID');\r\n    const newQuestionRef = database.ref('publicQuestions').push();\r\n    newQuestionRef\r\n        .set({\r\n            question: question.question,\r\n            answer: question.answer,\r\n            keyWords: question.keyWords || [],\r\n            reviewer: user.uid || 'brak danych',\r\n            author: question.uid || 'brak danych',\r\n            createdAt: Date.now()\r\n        })\r\n        .then(data => {\r\n            const newQuestion = { ...question };\r\n            newQuestion.id = newQuestionRef.key;\r\n            if (!addToCurrItems) {\r\n                dispatch({\r\n                    type: NEW_PUBLIC_QUESTION\r\n                });\r\n            } else {\r\n                dispatch({\r\n                    type: NEW_PUBLIC_QUESTION,\r\n                    payload: newQuestion\r\n                });\r\n            }\r\n        })\r\n        .catch(err => {\r\n            dispatch(returnErrors(err.message, err.code));\r\n            dispatch({\r\n                type: QUESTION_ERROR\r\n            });\r\n        });\r\n};\r\n\r\nexport const deleteQuestion = (id, databaseName) => dispatch => {\r\n    dispatch({\r\n        type: QUESTIONS_LOADING\r\n    });\r\n    database\r\n        .ref(`${databaseName}/${id}`)\r\n        .remove(data => {\r\n            dispatch({\r\n                type: DELETE_QUESTION,\r\n                payload: id\r\n            });\r\n        })\r\n        .catch(err => {\r\n            dispatch(returnErrors(err.message, err.code));\r\n            dispatch({\r\n                type: QUESTION_ERROR\r\n            });\r\n        });\r\n};\r\n\r\nexport const updateQuestion = (id, databaseName, dataToUpdate) => dispatch => {\r\n    database\r\n        .ref(`${databaseName}/${id}`)\r\n        .update({\r\n            ...dataToUpdate\r\n        })\r\n        .then(() => {\r\n            dispatch({\r\n                type: UPDATE_QUESTION,\r\n                payload: {\r\n                    id,\r\n                    question: dataToUpdate\r\n                }\r\n            });\r\n        })\r\n        .catch(err => {\r\n            dispatch(returnErrors(err.message, err.code));\r\n            dispatch({\r\n                type: QUESTION_ERROR\r\n            });\r\n        });\r\n};\r\n","import React from 'react';\r\n\r\nexport const Footer = () => {\r\n    return (\r\n        <footer className=\"footer\">\r\n            <a href=\"http://radzimin.ski\" className=\"footer__link\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                &copy; Jan Radzimiński 2020\r\n            </a>\r\n        </footer>\r\n    );\r\n};\r\n","import {\r\n    USER_LOADING,\r\n    USER_LOADED,\r\n    AUTH_ERROR,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT_SUCCESS,\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL,\r\n    PUBLISHER_FAIL,\r\n    ADMIN_LOADED,\r\n    PUBLISHER_LOADED,\r\n    UPDATED_PASSWORD,\r\n    USER_UPDATED\r\n} from './types';\r\nimport { auth, database } from '../firebase';\r\nimport { returnErrors } from './errorActions';\r\nimport { backendFunctions } from '../firebase';\r\n\r\n// Load User\r\nexport const loadUser = user => dispatch => {\r\n    dispatch({\r\n        type: USER_LOADING\r\n    });\r\n    const user = auth.currentUser;\r\n    if (user) {\r\n        user.getIdTokenResult()\r\n            .then(idTokenResult => {\r\n                if (idTokenResult.claims.admin)\r\n                    dispatch({\r\n                        type: ADMIN_LOADED\r\n                    });\r\n                else if (idTokenResult.claims.publisher) {\r\n                    dispatch({\r\n                        type: PUBLISHER_LOADED\r\n                    });\r\n                }\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type: PUBLISHER_FAIL\r\n                });\r\n            });\r\n        database\r\n            .ref(`users/${user.uid}`)\r\n            .once('value')\r\n            .then(data => data.val())\r\n            .then(userData => {\r\n                if (!userData) throw new Error('User is not defined in database');\r\n                user.firstName = userData.firstName || 'brak informacji';\r\n                user.lastName = userData.lastName || 'brak informacji';\r\n                user.city = userData.city || 'brak informacji';\r\n                dispatch({\r\n                    type: USER_LOADED,\r\n                    payload: user\r\n                });\r\n            })\r\n            .catch(err => {\r\n                dispatch(returnErrors(err.message, err.code));\r\n                user.firstName = 'brak informacji';\r\n                user.lastName = 'brak informacji';\r\n                user.city = 'brak informacji';\r\n                dispatch({\r\n                    type: USER_LOADED,\r\n                    payload: user\r\n                });\r\n            });\r\n    } else\r\n        dispatch({\r\n            type: AUTH_ERROR\r\n        });\r\n};\r\n\r\nexport const loginUser = (email, password) => dispatch => {\r\n    dispatch({\r\n        type: USER_LOADING\r\n    });\r\n    auth.signInWithEmailAndPassword(email, password)\r\n        .then(cred => {\r\n            dispatch({\r\n                type: LOGIN_SUCCESS\r\n            });\r\n        })\r\n        .catch(err => {\r\n            dispatch(returnErrors(err.message, err.code));\r\n            dispatch({ type: LOGIN_FAIL });\r\n        });\r\n};\r\n\r\nexport const logOut = () => dispatch => {\r\n    dispatch({\r\n        type: USER_LOADING\r\n    });\r\n    auth.signOut()\r\n        .then(() => {\r\n            dispatch({\r\n                type: LOGOUT_SUCCESS\r\n            });\r\n        })\r\n        .catch(err => {\r\n            dispatch(returnErrors(err.message, err.code));\r\n            dispatch({ type: AUTH_ERROR });\r\n        });\r\n};\r\n\r\nexport const registerUser = userData => dispatch => {\r\n    dispatch({\r\n        type: USER_LOADING\r\n    });\r\n    auth.createUserWithEmailAndPassword(userData.email, userData.password)\r\n        .then(cred => cred.user)\r\n        .then(user => {\r\n            database.ref(`users/${user.uid}`).set({\r\n                firstName: userData.firstName,\r\n                lastName: userData.lastName,\r\n                email: user.email,\r\n                city: userData.city,\r\n                isPublisher: false,\r\n                isAdmin: false\r\n            });\r\n            dispatch({ type: REGISTER_SUCCESS });\r\n        })\r\n        .catch(err => {\r\n            dispatch(returnErrors(err.message, err.code));\r\n            dispatch({ type: REGISTER_FAIL });\r\n        });\r\n};\r\n\r\nexport const addPublisher = (email, uid) => dispatch => {\r\n    dispatch({\r\n        type: USER_LOADING\r\n    });\r\n    backendFunctions\r\n        .httpsCallable('addPublisherRole')({ email })\r\n        .then(() => {\r\n            database\r\n                .ref(`users/${uid}`)\r\n                .update({ isPublisher: true })\r\n                .catch(err => {\r\n                    dispatch(returnErrors(err.message, err.code));\r\n                });\r\n        })\r\n        .catch(err => {\r\n            dispatch(returnErrors(err.message, err.code));\r\n        });\r\n};\r\n\r\nexport const removePublisher = (email, uid) => dispatch => {\r\n    dispatch({\r\n        type: USER_LOADING\r\n    });\r\n    backendFunctions\r\n        .httpsCallable('removePublisherRole')({ email })\r\n        .then(() => {\r\n            database\r\n                .ref(`users/${uid}`)\r\n                .update({ isPublisher: false })\r\n                .catch(err => {\r\n                    dispatch(returnErrors(err.message, err.code));\r\n                });\r\n        })\r\n        .catch(err => {\r\n            dispatch(returnErrors(err.message, err.code));\r\n        });\r\n};\r\n\r\nexport const addAdmin = (email, uid) => dispatch => {\r\n    dispatch({\r\n        type: USER_LOADING\r\n    });\r\n    backendFunctions\r\n        .httpsCallable('addAdminRole')({ email })\r\n        .then(() => {\r\n            database\r\n                .ref(`users/${uid}`)\r\n                .update({ isAdmin: true })\r\n                .catch(err => {\r\n                    dispatch(returnErrors(err.message, err.code));\r\n                });\r\n        })\r\n        .catch(err => {\r\n            dispatch(returnErrors(err.message, err.code));\r\n        });\r\n};\r\n\r\nexport const removeAdmin = (email, uid) => dispatch => {\r\n    dispatch({\r\n        type: USER_LOADING\r\n    });\r\n    backendFunctions\r\n        .httpsCallable('removeAdminRole')({ email })\r\n        .then(() => {\r\n            database\r\n                .ref(`users/${uid}`)\r\n                .update({ isAdmin: false })\r\n                .catch(err => {\r\n                    dispatch(returnErrors(err.message, err.code));\r\n                });\r\n        })\r\n        .catch(err => {\r\n            dispatch(returnErrors(err.message, err.code));\r\n        });\r\n};\r\n\r\nexport const changePassword = (user, newPassword, newPasswordConf, callback) => dispatch => {\r\n    dispatch({\r\n        type: USER_LOADING\r\n    });\r\n    if (!user) {\r\n        dispatch(returnErrors('Użytkownik nie jest zalogowany', 400));\r\n        dispatch({\r\n            type: UPDATED_PASSWORD\r\n        });\r\n        return;\r\n    }\r\n    if (newPassword !== newPasswordConf) {\r\n        dispatch(returnErrors('Hasła nie są takie same. Wprowadź to samo hasło w oba pola.', 400));\r\n        dispatch({\r\n            type: UPDATED_PASSWORD\r\n        });\r\n        return;\r\n    }\r\n    if (user) {\r\n        user.updatePassword(newPassword)\r\n            .then(() => {\r\n                callback();\r\n                dispatch({\r\n                    type: UPDATED_PASSWORD\r\n                });\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type: UPDATED_PASSWORD\r\n                });\r\n                dispatch(returnErrors(err.message, err.code));\r\n            });\r\n    }\r\n};\r\n\r\nexport const deleteUser = user => dispatch => {\r\n    if (!user) {\r\n        dispatch(returnErrors('Such user does not exist', 400));\r\n        return;\r\n    }\r\n    user.delete()\r\n        .then(() => {\r\n            database\r\n                .ref(`users/${user.uid}`)\r\n                .remove()\r\n                .then(() => {\r\n                    dispatch({\r\n                        type: LOGOUT_SUCCESS\r\n                    });\r\n                });\r\n        })\r\n        .catch(err => {\r\n            dispatch(returnErrors(err.message, err.code));\r\n        });\r\n};\r\n\r\nexport const updateUser = (user, userData) => dispatch => {\r\n    if (!user) {\r\n        dispatch(returnErrors('Such user does not exist', 400));\r\n        return;\r\n    }\r\n    if (userData.email !== user.email) {\r\n        user.updateEmail(userData.email)\r\n            .then(() => {\r\n                database\r\n                    .ref(`users/${user.uid}`)\r\n                    .update({\r\n                        ...userData\r\n                    })\r\n                    .then(() => {\r\n                        dispatch({\r\n                            type: USER_UPDATED,\r\n                            payload: userData\r\n                        });\r\n                    })\r\n                    .catch(err => {\r\n                        throw new Error(err.message, err.code);\r\n                    });\r\n            })\r\n            .catch(err => {\r\n                dispatch(returnErrors(err.message, err.code));\r\n            });\r\n    } else {\r\n        database\r\n            .ref(`users/${user.uid}`)\r\n            .update({\r\n                ...userData\r\n            })\r\n            .then(() => {\r\n                dispatch({\r\n                    type: USER_UPDATED,\r\n                    payload: userData\r\n                });\r\n            })\r\n            .catch(err => {\r\n                dispatch(returnErrors(err.message, err.code));\r\n            });\r\n    }\r\n};\r\n","import React, { Component } from 'react';\r\n\r\nexport class LoginTextInput extends Component {\r\n    state = {\r\n        value: ''\r\n    };\r\n\r\n    onChange = e => {\r\n        this.setState({ value: e.target.value });\r\n        this.props.onChange(e);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                className={`login__input-box ${\r\n                    this.props.classType ? 'login__input-box--' + this.props.classType : ''\r\n                }`}\r\n            >\r\n                <input\r\n                    type={this.props.type}\r\n                    className=\"login__input\"\r\n                    id={this.props.id}\r\n                    placeholder={this.props.placeholder}\r\n                    onChange={this.onChange}\r\n                    value={this.state.value}\r\n                    name={this.props.id}\r\n                    required={this.props.required}\r\n                />\r\n                <label htmlFor={this.props.id} className=\"login__label\">\r\n                    {this.props.label}\r\n                </label>\r\n                {this.props.icon}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LoginTextInput;\r\n","import React, { Component, Fragment } from 'react';\r\nimport { IoMdPerson, IoMdLock } from 'react-icons/io';\r\nimport { MdEmail } from 'react-icons/md';\r\nimport { connect } from 'react-redux';\r\nimport { loginUser, registerUser } from '../actions/authActions';\r\nimport LoginTextInput from './LoginTextInput';\r\nimport { Loader } from './Loader';\r\n\r\nexport class Login extends Component {\r\n    state = {\r\n        register: false,\r\n        email: '',\r\n        password: '',\r\n        firstName: '',\r\n        lastName: '',\r\n        city: ''\r\n    };\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.isAuthenticated) this.props.history.push('/');\r\n    }\r\n\r\n    onChangeFormType = type => {\r\n        this.setState({ register: type === true });\r\n    };\r\n\r\n    onSubmit = e => {\r\n        e.preventDefault();\r\n        if (!this.state.register) this.props.loginUser(this.state.email, this.state.password);\r\n        else\r\n            this.props.registerUser({\r\n                email: this.state.email,\r\n                password: this.state.password,\r\n                firstName: this.state.firstName,\r\n                lastName: this.state.lastName,\r\n                city: this.state.city\r\n            });\r\n    };\r\n\r\n    onInputChange = e => {\r\n        if (e.target) this.setState({ [e.target.name]: e.target.value });\r\n    };\r\n\r\n    render() {\r\n        let btns = (\r\n            <div className=\"login__btns\">\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"login__btn\"\r\n                    onClick={() => this.onChangeFormType(false)}\r\n                >\r\n                    Zaloguj się\r\n                </button>\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"login__btn login__btn--grey\"\r\n                    onClick={() => this.onChangeFormType(true)}\r\n                >\r\n                    Zarejestruj się\r\n                </button>\r\n            </div>\r\n        );\r\n\r\n        let title = 'Login';\r\n\r\n        if (this.state.register) {\r\n            btns = (\r\n                <div className=\"login__btns\">\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"login__btn  login__btn--grey\"\r\n                        onClick={() => this.onChangeFormType(false)}\r\n                    >\r\n                        Zaloguj się\r\n                    </button>\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"login__btn\"\r\n                        onClick={() => this.onChangeFormType(true)}\r\n                    >\r\n                        Zarejestruj się\r\n                    </button>\r\n                </div>\r\n            );\r\n            title = 'Rejestracja';\r\n        }\r\n\r\n        let inputFields = (\r\n            <Fragment>\r\n                <LoginTextInput\r\n                    type=\"text\"\r\n                    id=\"email\"\r\n                    placeholder=\"Email\"\r\n                    onChange={this.onInputChange}\r\n                    label=\"Email:\"\r\n                    icon={<IoMdPerson className=\"login__icon\" />}\r\n                    required\r\n                />\r\n                <LoginTextInput\r\n                    type=\"password\"\r\n                    id=\"password\"\r\n                    placeholder=\"Hasło\"\r\n                    onChange={this.onInputChange}\r\n                    label=\"Hasło:\"\r\n                    icon={<IoMdLock className=\"login__icon\" />}\r\n                    required\r\n                    classType=\"last\"\r\n                />\r\n            </Fragment>\r\n        );\r\n        if (this.state.register) {\r\n            inputFields = (\r\n                <Fragment>\r\n                    <LoginTextInput\r\n                        type=\"text\"\r\n                        id=\"firstName\"\r\n                        placeholder=\"Imię\"\r\n                        onChange={this.onInputChange}\r\n                        label=\"Imię:\"\r\n                        icon={<IoMdPerson className=\"login__icon\" />}\r\n                        required\r\n                    />\r\n                    <LoginTextInput\r\n                        type=\"text\"\r\n                        id=\"lastName\"\r\n                        placeholder=\"Nazwisko\"\r\n                        onChange={this.onInputChange}\r\n                        label=\"Nazwisko:\"\r\n                        icon={<IoMdPerson className=\"login__icon\" />}\r\n                        required\r\n                    />\r\n                    <LoginTextInput\r\n                        type=\"text\"\r\n                        id=\"email\"\r\n                        placeholder=\"Email\"\r\n                        onChange={this.onInputChange}\r\n                        label=\"Email:\"\r\n                        icon={<MdEmail className=\"login__icon\" />}\r\n                        required\r\n                    />\r\n                    <LoginTextInput\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        placeholder=\"Hasło\"\r\n                        onChange={this.onInputChange}\r\n                        label=\"Hasło:\"\r\n                        icon={<IoMdLock className=\"login__icon\" />}\r\n                        required\r\n                    />\r\n                    <LoginTextInput\r\n                        type=\"text\"\r\n                        id=\"city\"\r\n                        placeholder=\"Miejscowość\"\r\n                        onChange={this.onInputChange}\r\n                        label=\"Miejscowość zamieszkania:\"\r\n                        icon={<MdEmail className=\"login__icon\" />}\r\n                        classType=\"last\"\r\n                    />\r\n                </Fragment>\r\n            );\r\n        }\r\n        let loading = (\r\n            <div className=\"u-centered\">\r\n                <Loader />\r\n            </div>\r\n        );\r\n        if (!this.props.isLoading)\r\n            loading = this.props.errorMsg.length ? (\r\n                <h3 className=\"login__msg\">{this.props.errorMsg}</h3>\r\n            ) : null;\r\n\r\n        return (\r\n            <form className=\"login\" onSubmit={this.onSubmit}>\r\n                {btns}\r\n                <h2 className=\"login__title\">{title}</h2>\r\n                {inputFields}\r\n                {loading}\r\n                <button type=\"submit\" className=\"btn btn--full\">\r\n                    Wyślij\r\n                </button>\r\n\r\n                {/* <div id=\"firebaseui-auth-container\"></div> */}\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    isLoading: state.auth.isLoading,\r\n    isAuthenticated: state.auth.isAuthenticated,\r\n    errorMsg: state.error.msg\r\n});\r\n\r\nexport default connect(mapStateToProps, { loginUser, registerUser })(Login);\r\n","import React, { Fragment } from 'react';\r\nimport { logOut } from '../actions/authActions';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router';\r\nimport { IoIosLogOut } from 'react-icons/io';\r\nimport { MdAccountCircle, MdSettings } from 'react-icons/md';\r\nimport { FaQuestion } from 'react-icons/fa';\r\n\r\nconst UserMenu = props => {\r\n    if (window.innerWidth < 800) {\r\n        return (\r\n            <Fragment>\r\n                <div className=\"user-menu\" onClick={props.onClick}>\r\n                    <ul className=\"user-menu__list\">\r\n                        <li className=\"user-menu__link\">\r\n                            {props.firstName} {props.lastName}\r\n                        </li>\r\n                        <li\r\n                            className=\"user-menu__link\"\r\n                            onClick={() => {\r\n                                props.onClick();\r\n                                props.history.push('/');\r\n                            }}\r\n                        >\r\n                            <FaQuestion className=\"user-menu__icon\" />\r\n                            Wszystkie pytania\r\n                        </li>\r\n                        <li\r\n                            className=\"user-menu__link\"\r\n                            onClick={() => {\r\n                                props.onClick();\r\n                                props.history.push('/prywatne');\r\n                            }}\r\n                        >\r\n                            <FaQuestion className=\"user-menu__icon\" />\r\n                            Moje pytania\r\n                        </li>\r\n                        {props.isPublisher ? (\r\n                            <li\r\n                                className=\"user-menu__link\"\r\n                                onClick={() => {\r\n                                    props.onClick();\r\n                                    props.history.push('/recenzje');\r\n                                }}\r\n                            >\r\n                                <FaQuestion className=\"user-menu__icon\" />\r\n                                Pytania do recenzji\r\n                            </li>\r\n                        ) : null}\r\n                        {props.isAdmin ? (\r\n                            <li\r\n                                className=\"user-menu__link\"\r\n                                onClick={() => {\r\n                                    props.onClick();\r\n                                    props.history.push('/admin');\r\n                                }}\r\n                            >\r\n                                <FaQuestion className=\"user-menu__icon\" />\r\n                                Admin\r\n                            </li>\r\n                        ) : null}\r\n                        <li\r\n                            className=\"user-menu__link\"\r\n                            onClick={() => {\r\n                                props.onClick();\r\n                                props.history.push('/account');\r\n                            }}\r\n                        >\r\n                            <MdAccountCircle className=\"user-menu__icon\" />\r\n                            Twoje konto\r\n                        </li>\r\n                        <li\r\n                            className=\"user-menu__link\"\r\n                            onClick={() => {\r\n                                props.onClick();\r\n                                props.history.push('/change');\r\n                            }}\r\n                        >\r\n                            <MdSettings className=\"user-menu__icon\" />\r\n                            Zmień hasło\r\n                        </li>\r\n                        <li\r\n                            className=\"user-menu__link\"\r\n                            onClick={() => {\r\n                                props.logOut();\r\n                                props.onClick();\r\n                                props.history.push('/');\r\n                            }}\r\n                        >\r\n                            <IoIosLogOut className=\"user-menu__icon\" /> Wyloguj się\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </Fragment>\r\n        );\r\n    }\r\n    return (\r\n        <div className=\"user-menu\" onClick={props.onClick}>\r\n            <ul className=\"user-menu__list\">\r\n                <li className=\"user-menu__link\">\r\n                    {props.firstName} {props.lastName}\r\n                </li>\r\n                <li\r\n                    className=\"user-menu__link\"\r\n                    onClick={() => {\r\n                        props.onClick();\r\n                        props.history.push('/account');\r\n                    }}\r\n                >\r\n                    <MdAccountCircle className=\"user-menu__icon\" />\r\n                    Twoje konto\r\n                </li>\r\n                <li\r\n                    className=\"user-menu__link\"\r\n                    onClick={() => {\r\n                        props.onClick();\r\n                        props.history.push('/change');\r\n                    }}\r\n                >\r\n                    <MdSettings className=\"user-menu__icon\" />\r\n                    Zmień hasło\r\n                </li>\r\n                <li\r\n                    className=\"user-menu__link\"\r\n                    onClick={() => {\r\n                        props.logOut();\r\n                        props.onClick();\r\n                        props.history.push('/');\r\n                    }}\r\n                >\r\n                    <IoIosLogOut className=\"user-menu__icon\" /> Wyloguj się\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    firstName: state.auth.user.firstName,\r\n    lastName: state.auth.user.lastName,\r\n    isPublisher: state.auth.isPublisher,\r\n    isAdmin: state.auth.isAdmin\r\n});\r\n\r\nexport default withRouter(connect(mapStateToProps, { logOut })(UserMenu));\r\n","import React, { Fragment } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nconst UserNavBar = props => {\r\n    if (window.innerWidth < 800) return <Fragment />;\r\n    return (\r\n        <div className=\"user-nav-bar\">\r\n            <ul className=\"user-nav-bar__list\">\r\n                <li\r\n                    className={`user-nav-bar__link ${\r\n                        props.history.location.pathname === '/'\r\n                            ? 'user-nav-bar__link--active'\r\n                            : null\r\n                    }`}\r\n                    onClick={() => props.history.push('/')}\r\n                >\r\n                    Wszystkie pytania\r\n                </li>\r\n                <li\r\n                    className={`user-nav-bar__link ${\r\n                        props.history.location.pathname === '/prywatne'\r\n                            ? 'user-nav-bar__link--active'\r\n                            : null\r\n                    }`}\r\n                    onClick={() => props.history.push('/prywatne')}\r\n                >\r\n                    Moje pytania\r\n                </li>\r\n                {props.isPublisher || props.isAdmin ? (\r\n                    <li\r\n                        className={`user-nav-bar__link ${\r\n                            props.history.location.pathname === '/recenzje'\r\n                                ? 'user-nav-bar__link--active'\r\n                                : null\r\n                        }`}\r\n                        onClick={() => props.history.push('/recenzje')}\r\n                    >\r\n                        Pytania do recenzji\r\n                    </li>\r\n                ) : null}\r\n                {props.isAdmin ? (\r\n                    <li\r\n                        className={`user-nav-bar__link ${\r\n                            props.history.location.pathname === '/admin'\r\n                                ? 'user-nav-bar__link--active'\r\n                                : null\r\n                        }`}\r\n                        onClick={() => props.history.push('/admin')}\r\n                    >\r\n                        Admin\r\n                    </li>\r\n                ) : null}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default withRouter(UserNavBar);\r\n","import React, { Component, Fragment } from 'react';\r\nimport { FaQuestion } from 'react-icons/fa';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { IoMdPerson, IoMdSettings } from 'react-icons/io';\r\nimport UserMenu from '../components/UserMenu';\r\nimport UserNavBar from './UserNavBar';\r\n\r\nexport class NavBar extends Component {\r\n    state = {\r\n        icon: false,\r\n        showUserMenu: false,\r\n        sticked: false\r\n    };\r\n\r\n    changeIcon = () => {\r\n        this.setState({ icon: !this.state.icon });\r\n    };\r\n\r\n    showUserMenu = () => {\r\n        this.setState({ showUserMenu: true });\r\n    };\r\n\r\n    hideUserMenu = () => {\r\n        this.setState({ showUserMenu: false });\r\n    };\r\n\r\n    render() {\r\n        let userMenu = null;\r\n        if (this.state.showUserMenu) {\r\n            userMenu = <UserMenu onClick={() => this.hideUserMenu()} />;\r\n        }\r\n\r\n        let rightCorner = (\r\n            <Link to=\"/login\" style={{ textDecoration: 'none' }}>\r\n                <button className=\"btn btn--full btn--small\">Zaloguj się</button>\r\n            </Link>\r\n        );\r\n\r\n        if (this.props.isAuth) {\r\n            rightCorner = (\r\n                <div className=\"nav-bar__user\">\r\n                    <UserNavBar isAdmin={this.props.isAdmin} isPublisher={this.props.isPublisher} />\r\n                    <button\r\n                        className=\"nav-bar__login-btn\"\r\n                        onMouseEnter={() => this.changeIcon()}\r\n                        onMouseLeave={() => this.changeIcon()}\r\n                        onClick={this.state.showUserMenu ? this.hideUserMenu : this.showUserMenu}\r\n                    >\r\n                        {this.state.icon ? (\r\n                            <IoMdSettings className=\"nav-bar__login-icon\" />\r\n                        ) : (\r\n                            <IoMdPerson className=\"nav-bar__login-icon\" />\r\n                        )}\r\n                        {userMenu}\r\n                    </button>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Fragment>\r\n                <header className={'nav-bar ' + (this.state.sticked ? 'nav-bar--sticked' : '')}>\r\n                    <Link to=\"/\" style={{ textDecoration: 'none' }}>\r\n                        <div className=\"logo\">\r\n                            <div className=\"logo__img\">\r\n                                <FaQuestion className=\"logo__icon\" />\r\n                            </div>\r\n                            <div className=\"logo__text\">Baza Pytań</div>\r\n                        </div>\r\n                    </Link>\r\n\r\n                    {rightCorner}\r\n                </header>\r\n                {this.state.showUserMenu ? (\r\n                    <div className=\"modal-user\" onClick={this.hideUserMenu}></div>\r\n                ) : null}\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    isAuth: state.auth.isAuthenticated,\r\n    isAdmin: state.auth.isAdmin,\r\n    isPublisher: state.auth.isPublisher\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(NavBar);\r\n","import React, { Component, Fragment } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Button from '../components/Button';\r\nimport { MdSettings } from 'react-icons/md';\r\nimport { TiDelete } from 'react-icons/ti';\r\nimport { deleteUser, updateUser } from '../actions/authActions';\r\nimport Modal from 'react-modal';\r\n\r\nconst customStyles = {\r\n    content: {\r\n        top: '50%',\r\n        left: '50%',\r\n        right: 'auto',\r\n        bottom: 'auto',\r\n        marginRight: '-50%',\r\n        transform: 'translate(-50%, -50%)'\r\n    }\r\n};\r\n\r\nexport class AccountDashboard extends Component {\r\n    state = {\r\n        editMode: false,\r\n        email: '',\r\n        firstName: '',\r\n        lastName: '',\r\n        city: '',\r\n        showModal: false,\r\n        showMessage: false,\r\n        modalMessage: 'Czy na pewno chcesz USUNĄĆ swoje konto? Tej akcji nie da się cofnąć!',\r\n        edited: false\r\n    };\r\n\r\n    componentDidMount() {\r\n        if (!this.props.isAuthenticated) {\r\n            this.props.history.push('/');\r\n        }\r\n        if (\r\n            this.props.user &&\r\n            this.props.user.email !== this.state.email &&\r\n            !this.state.editMode &&\r\n            !this.state.edited\r\n        ) {\r\n            this.setState({\r\n                ...this.props.user\r\n            });\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (!this.props.isAuthenticated) {\r\n            this.props.history.push('/');\r\n        }\r\n\r\n        if (\r\n            this.props.user &&\r\n            this.props.user.email !== this.state.email &&\r\n            !this.state.editMode &&\r\n            !this.state.edited\r\n        ) {\r\n            this.setState({\r\n                ...this.props.user\r\n            });\r\n        }\r\n    }\r\n\r\n    saveChanges = () => {\r\n        this.props.updateUser(this.props.user, {\r\n            email: this.state.email,\r\n            city: this.state.city,\r\n            firstName: this.state.firstName,\r\n            lastName: this.state.lastName\r\n        });\r\n        this.setState({ editMode: false, edited: true });\r\n    };\r\n\r\n    toggleModal = togg => {\r\n        this.setState({ showModal: togg });\r\n    };\r\n\r\n    toggleEditMode = mode => {\r\n        this.setState({ editMode: mode });\r\n    };\r\n\r\n    deleteUser = () => {\r\n        this.props.deleteUser(this.props.user);\r\n        this.toggleModal(false);\r\n        this.showMessage(true);\r\n    };\r\n\r\n    showMessage = show => {\r\n        this.setState({ showMessage: true });\r\n    };\r\n\r\n    onInputChange = e => {\r\n        this.setState({ [e.target.name]: e.target.value.trim() });\r\n    };\r\n\r\n    render() {\r\n        if (!this.props.isAuthenticated) return <Fragment></Fragment>;\r\n\r\n        // EDIT MODE\r\n        if (this.state.editMode)\r\n            return (\r\n                <Fragment>\r\n                    <h1 className=\"heading-primary\">Twoje konto</h1>\r\n                    <div className=\"account-info__box\">\r\n                        <div className=\"account-info__field\">\r\n                            <span className=\"account-info__field-title\">Email:</span>{' '}\r\n                            <input\r\n                                className=\"account-info__input\"\r\n                                type=\"text\"\r\n                                name=\"email\"\r\n                                value={this.state.email}\r\n                                onChange={this.onInputChange}\r\n                            />\r\n                        </div>\r\n                        <div className=\"account-info__field\">\r\n                            <span className=\"account-info__field-title\">Imię:</span>{' '}\r\n                            <input\r\n                                className=\"account-info__input\"\r\n                                type=\"text\"\r\n                                name=\"firstName\"\r\n                                value={this.state.firstName}\r\n                                onChange={this.onInputChange}\r\n                            />\r\n                        </div>\r\n                        <div className=\"account-info__field\">\r\n                            <span className=\"account-info__field-title\">Nazwisko:</span>{' '}\r\n                            <input\r\n                                className=\"account-info__input\"\r\n                                type=\"text\"\r\n                                name=\"lastName\"\r\n                                value={this.state.lastName}\r\n                                onChange={this.onInputChange}\r\n                            />\r\n                        </div>\r\n                        <div className=\"account-info__field\">\r\n                            <span className=\"account-info__field-title\">Miejsce zamieszkania:</span>{' '}\r\n                            <input\r\n                                className=\"account-info__input\"\r\n                                type=\"text\"\r\n                                name=\"city\"\r\n                                value={this.state.city}\r\n                                onChange={this.onInputChange}\r\n                            />\r\n                        </div>\r\n                        <div className=\"account-info__field\">\r\n                            <span className=\"account-info__field-title\">Status:</span>{' '}\r\n                            {this.props.isAdmin\r\n                                ? 'Admin'\r\n                                : this.props.isPublisher\r\n                                ? 'Recenzent'\r\n                                : 'Użytkownik'}\r\n                        </div>\r\n                        <div className=\"account-info__btns\">\r\n                            <Button type=\"short\" onClick={() => this.saveChanges()}>\r\n                                <MdSettings className=\"account-info__btn-icon\" />\r\n                                &emsp;&emsp; Zapisz zmiany\r\n                            </Button>\r\n                            <Button\r\n                                types={['short', 'delete']}\r\n                                onClick={() => this.toggleEditMode(false)}\r\n                            >\r\n                                <TiDelete className=\"account-info__btn-icon\" />\r\n                                &emsp;&emsp; Anuluj\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"login__msg\">\r\n                        {this.state.showMessage\r\n                            ? this.props.msg.length\r\n                                ? this.props.msg\r\n                                : null\r\n                            : null}\r\n                    </div>\r\n\r\n                    <Modal\r\n                        isOpen={this.state.showModal}\r\n                        style={customStyles}\r\n                        contentLabel=\"Example Modal\"\r\n                        overlayClassName=\"modal__overlay\"\r\n                        onRequestClose={() => this.toggleModal(false)}\r\n                    >\r\n                        <div className=\"modal__window\">\r\n                            <h2>{this.state.modalMessage}</h2>\r\n                            <div className=\"modal__btns\">\r\n                                <Button type=\"short\" onClick={this.deleteUser}>\r\n                                    Tak\r\n                                </Button>\r\n                                <Button\r\n                                    types={['delete', 'short']}\r\n                                    onClick={() => this.toggleModal(false)}\r\n                                >\r\n                                    Anuluj\r\n                                </Button>\r\n                            </div>\r\n                        </div>\r\n                    </Modal>\r\n                </Fragment>\r\n            );\r\n\r\n        // NORMAL MODE\r\n        return (\r\n            <Fragment>\r\n                <h1 className=\"heading-primary\">Twoje konto</h1>\r\n                <div className=\"account-info__box\">\r\n                    <div className=\"account-info__field\">\r\n                        <span className=\"account-info__field-title\">Email:</span> {this.state.email}\r\n                    </div>\r\n                    <div className=\"account-info__field\">\r\n                        <span className=\"account-info__field-title\">Imię:</span>{' '}\r\n                        {this.state.firstName}\r\n                    </div>\r\n                    <div className=\"account-info__field\">\r\n                        <span className=\"account-info__field-title\">Nazwisko:</span>{' '}\r\n                        {this.state.lastName}\r\n                    </div>\r\n                    <div className=\"account-info__field\">\r\n                        <span className=\"account-info__field-title\">Miejsce zamieszkania:</span>{' '}\r\n                        {this.state.city}\r\n                    </div>\r\n                    <div className=\"account-info__field\">\r\n                        <span className=\"account-info__field-title\">Status:</span>{' '}\r\n                        {this.props.isAdmin\r\n                            ? 'Admin'\r\n                            : this.props.isPublisher\r\n                            ? 'Recenzent'\r\n                            : 'Użytkownik'}\r\n                    </div>\r\n                    <div className=\"account-info__btns\">\r\n                        <Button type=\"short\" onClick={() => this.toggleEditMode(true)}>\r\n                            <MdSettings className=\"account-info__btn-icon\" />\r\n                            &emsp;&emsp; Edytuj dane\r\n                        </Button>\r\n                        <Button types={['short', 'delete']} onClick={() => this.toggleModal(true)}>\r\n                            <TiDelete className=\"account-info__btn-icon\" />\r\n                            &emsp;&emsp; Usuń konto\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"login__msg\">\r\n                    {this.state.showMessage\r\n                        ? this.props.msg.length\r\n                            ? this.props.msg\r\n                            : null\r\n                        : null}\r\n                </div>\r\n\r\n                <Modal\r\n                    isOpen={this.state.showModal}\r\n                    style={customStyles}\r\n                    contentLabel=\"Example Modal\"\r\n                    overlayClassName=\"modal__overlay\"\r\n                    onRequestClose={() => this.toggleModal(false)}\r\n                >\r\n                    <div className=\"modal__window\">\r\n                        <h2>{this.state.modalMessage}</h2>\r\n                        <div className=\"modal__btns\">\r\n                            <Button type=\"short\" onClick={this.deleteUser}>\r\n                                Tak\r\n                            </Button>\r\n                            <Button\r\n                                types={['delete', 'short']}\r\n                                onClick={() => this.toggleModal(false)}\r\n                            >\r\n                                Anuluj\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                </Modal>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    isAuthenticated: state.auth.isAuthenticated,\r\n    user: state.auth.user,\r\n    isAdmin: state.auth.isAdmin,\r\n    isPublisher: state.auth.isPublisher,\r\n    msg: state.error.msg\r\n});\r\n\r\nexport default connect(mapStateToProps, { deleteUser, updateUser })(AccountDashboard);\r\n","import React, { Component } from 'react';\r\nimport { database } from '../firebase';\r\nimport { IoMdPerson } from 'react-icons/io';\r\nimport { FaBookReader, FaAngleDoubleDown } from 'react-icons/fa';\r\nimport {\r\n    addPublisher,\r\n    removePublisher,\r\n    addAdmin,\r\n    removeAdmin,\r\n    deleteUser\r\n} from '../actions/authActions';\r\nimport { connect } from 'react-redux';\r\nimport Button from './Button';\r\nimport Filter from './Filter';\r\nimport { Loader } from './Loader';\r\nimport Modal from 'react-modal';\r\nimport { MdDeleteForever, MdStar, MdSettings } from 'react-icons/md';\r\n\r\nconst customStyles = {\r\n    content: {\r\n        top: '50%',\r\n        left: '50%',\r\n        right: 'auto',\r\n        bottom: 'auto',\r\n        marginRight: '-50%',\r\n        transform: 'translate(-50%, -50%)'\r\n    }\r\n};\r\n\r\n// Make sure to bind modal to your appElement (http://reactcommunity.org/react-modal/accessibility/)\r\nModal.setAppElement('#root');\r\n\r\nexport class UsersBox extends Component {\r\n    defaultUsersPerPage = 5;\r\n\r\n    state = {\r\n        users: [],\r\n        numOfUsers: 5,\r\n        filterInput: [],\r\n        isFiltering: false,\r\n        isLoading: true,\r\n        showModal: false,\r\n        currentUser: null,\r\n        modalMessage: '',\r\n        upgrading: true\r\n    };\r\n\r\n    componentDidMount() {\r\n        database.ref('users').on('value', data => {\r\n            const newUsers = [];\r\n            const users = data.val();\r\n            for (let user in users) {\r\n                const newUser = {\r\n                    firstName: users[user].firstName,\r\n                    lastName: users[user].lastName,\r\n                    email: users[user].email,\r\n                    city: users[user].city,\r\n                    phone: users[user].phone,\r\n                    id: user,\r\n                    isPublisher: users[user].isPublisher === true,\r\n                    isAdmin: users[user].isAdmin === true\r\n                };\r\n                newUsers.push(newUser);\r\n            }\r\n            this.setState({ users: newUsers, isLoading: false });\r\n        });\r\n    }\r\n\r\n    loadMoreUsres = () => {\r\n        const oldUsersNum = this.state.numOfUsers;\r\n        this.setState({ numOfUsers: oldUsersNum + 5 });\r\n    };\r\n\r\n    resetUsersNum = () => {\r\n        if (this.state.numOfUsers !== this.defaultUsersPerPage)\r\n            this.setState({ numOfUsers: this.defaultUsersPerPage });\r\n    };\r\n\r\n    onFilterChange = input => {\r\n        if (input.length && input[0].length > 1) {\r\n            this.setState({ filterInput: input, isFiltering: true });\r\n            return;\r\n        }\r\n        this.setState({ filterInput: input, isFiltering: false });\r\n    };\r\n\r\n    onDeleteUser = id => {\r\n        window.alert(\r\n            'Niestety funkcja usuwania użytkowników nie została jak na razie aktywowana. W celu usunięcia użytkownika skontaktuj się z administratorem.'\r\n        );\r\n        this.setState({ isLoading: false, showModal: false });\r\n    };\r\n\r\n    onDowngradeUser = user => {\r\n        this.setState({ isLoading: true, showModal: false });\r\n        if (user.isAdmin) this.props.removeAdmin(user.email, user.id);\r\n        else if (user.isPublisher) this.props.removePublisher(user.email, user.id);\r\n        else this.onDeleteUser();\r\n    };\r\n\r\n    onUpgradeUser = user => {\r\n        this.setState({ isLoading: true, showModal: false });\r\n        if (user.isAdmin) return;\r\n        if (user.isPublisher) this.props.addAdmin(user.email, user.id);\r\n        else this.props.addPublisher(user.email, user.id);\r\n    };\r\n\r\n    onConfirmUpgradeUser = id => {\r\n        const user = this.state.users.find(el => el.id === id);\r\n        let msg = `Czy na pewno chcesz mianować ${user.firstName} ${user.lastName} recenzentem?`;\r\n        if (user.isPublisher)\r\n            msg = `Czy na pewno chcesz mianować ${user.firstName} ${user.lastName} administratorem?`;\r\n        this.setState({\r\n            showModal: true,\r\n            currentUser: { ...user },\r\n            modalMessage: msg,\r\n            upgrading: true\r\n        });\r\n    };\r\n\r\n    onConfirmDowngradeUser = id => {\r\n        const user = this.state.users.find(el => el.id === id);\r\n        let msg = `Czy na pewno chcesz USUNĄĆ użytkownika ${user.firstName} ${user.lastName}?`;\r\n        if (user.isAdmin)\r\n            msg = `Czy na pewno chcesz usunąć status ADMINISTRATORA użytkownikowi ${user.firstName} ${user.lastName}?`;\r\n        else if (user.isPublisher)\r\n            msg = `Czy na pewno chcesz usunąć status recenzenta użytkownikowi ${user.firstName} ${user.lastName}?`;\r\n\r\n        this.setState({\r\n            showModal: true,\r\n            currentUser: { ...user },\r\n            modalMessage: msg,\r\n            upgrading: false\r\n        });\r\n    };\r\n\r\n    onCloseModal = () => {\r\n        this.setState({ showModal: false });\r\n        this.setState({ currentUser: null });\r\n    };\r\n\r\n    componentWillUnmount() {\r\n        database.ref('users').off();\r\n    }\r\n\r\n    render() {\r\n        const usersToRender = this.state.users\r\n            .filter(el => el.email !== this.props.myEmail)\r\n            .filter(el => {\r\n                if (!this.state.isFiltering) return true;\r\n                this.resetUsersNum();\r\n                let flag = false;\r\n                this.state.filterInput.forEach(key => {\r\n                    if (el.firstName.toLowerCase().includes(key.toLowerCase()) && key.length > 1)\r\n                        flag = true;\r\n                    if (el.lastName.toLowerCase().includes(key.toLowerCase()) && key.length > 1)\r\n                        flag = true;\r\n                    if (el.email.toLowerCase().includes(key.toLowerCase()) && key.length > 1)\r\n                        flag = true;\r\n                    if (el.city.toLowerCase().includes(key.toLowerCase()) && key.length > 1)\r\n                        flag = true;\r\n                });\r\n                return flag;\r\n            })\r\n            .slice(0, this.state.numOfUsers)\r\n            .map(el => (\r\n                <div key={el.id} id={el.id} className=\"users-box__user\">\r\n                    <div className=\"users-box__user-icon-box\">\r\n                        <div className=\"users-box__user-icon-container\">\r\n                            {el.isAdmin ? (\r\n                                <MdSettings className=\"users-box__user-icon\" />\r\n                            ) : el.isPublisher ? (\r\n                                <FaBookReader className=\"users-box__user-icon\" />\r\n                            ) : (\r\n                                <IoMdPerson className=\"users-box__user-icon\" />\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"users-box__user-info-box\">\r\n                        <div className=\"users-box__user-name\">\r\n                            {el.firstName} {el.lastName}\r\n                        </div>\r\n                        <div className=\"users-box__user-info\">\r\n                            <div className=\"users-box__user-info-field\">\r\n                                Email: &emsp;\r\n                                {el.email}\r\n                            </div>\r\n                            <div className=\"users-box__user-info-field\">\r\n                                Miasto:&emsp;\r\n                                {el.city}\r\n                            </div>\r\n                            <div className=\"users-box__user-info-field\">\r\n                                Status:&emsp;\r\n                                {el.isAdmin\r\n                                    ? 'Administrator'\r\n                                    : el.isPublisher\r\n                                    ? 'Recenzent'\r\n                                    : 'Użytkownik'}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"users-box__btns\">\r\n                        <button\r\n                            className={`users-box__btn ${\r\n                                el.isAdmin\r\n                                    ? 'users-box__btn--disabled'\r\n                                    : el.isPublisher\r\n                                    ? 'users-box__btn--premium'\r\n                                    : 'users-box__btn--confirm'\r\n                            }`}\r\n                            onClick={() => this.onConfirmUpgradeUser(el.id)}\r\n                        >\r\n                            <MdStar className=\"users-box__btn-icon\" />\r\n                        </button>\r\n                        <button\r\n                            className={'users-box__btn users-box__btn--delete'}\r\n                            onClick={() => this.onConfirmDowngradeUser(el.id)}\r\n                        >\r\n                            {el.isAdmin || el.isPublisher ? (\r\n                                <FaAngleDoubleDown className=\"users-box__btn-icon\" />\r\n                            ) : (\r\n                                <MdDeleteForever className=\"users-box__btn-icon\" />\r\n                            )}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            ));\r\n\r\n        return (\r\n            <div className=\"users-box\">\r\n                <Modal\r\n                    isOpen={this.state.showModal}\r\n                    style={customStyles}\r\n                    contentLabel=\"Example Modal\"\r\n                    overlayClassName=\"modal__overlay\"\r\n                    onRequestClose={this.onCloseModal}\r\n                >\r\n                    <div className=\"modal__window\">\r\n                        <h2 className=\"modal__msg modal__msg--black\">{this.state.modalMessage}</h2>\r\n                        <div className=\"modal__btns\">\r\n                            <Button\r\n                                type=\"short\"\r\n                                onClick={() =>\r\n                                    this.state.upgrading\r\n                                        ? this.onUpgradeUser(this.state.currentUser)\r\n                                        : this.onDowngradeUser(this.state.currentUser)\r\n                                }\r\n                            >\r\n                                Tak\r\n                            </Button>\r\n                            <Button types={['delete', 'short']} onClick={this.onCloseModal}>\r\n                                Anuluj\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                </Modal>\r\n                <Filter placeholder=\"Szukaj użytkowników\" onChange={this.onFilterChange} />\r\n                {this.state.isLoading ? (\r\n                    <div className=\"u-centered\">\r\n                        <Loader />\r\n                    </div>\r\n                ) : (\r\n                    usersToRender\r\n                )}\r\n                <Button\r\n                    type=\"long\"\r\n                    onClick={this.loadMoreUsres}\r\n                    className={this.state.numOfUsers > this.state.users.length ? 'btn--grey' : ''}\r\n                >\r\n                    Załaduj więcej uzytkowników\r\n                </Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    myEmail: state.auth.user ? state.auth.user.email : ''\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    addPublisher,\r\n    removePublisher,\r\n    addAdmin,\r\n    removeAdmin,\r\n    deleteUser\r\n})(UsersBox);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport UsersBox from '../components/UsersBox';\r\n\r\nexport class AdminDashboard extends Component {\r\n    state = {\r\n        users: [],\r\n    };\r\n\r\n    componentDidMount() {\r\n        if (!this.props.isAdmin) this.props.history.push('/');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"admin-dash\">\r\n                <h1 className=\"heading-primary\">Zarządzaj użytkownikami</h1>\r\n                <UsersBox />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAdmin: state.auth.isAdmin,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(AdminDashboard);\r\n","import React, { Component } from 'react';\r\nimport LoginTextInput from './LoginTextInput.js';\r\nimport { IoMdLock } from 'react-icons/io';\r\nimport { connect } from 'react-redux';\r\nimport { changePassword } from '../actions/authActions';\r\nimport { Loader } from './Loader';\r\nimport Modal from 'react-modal';\r\nimport Button from './Button.js';\r\n\r\nconst customStyles = {\r\n    content: {\r\n        top: '50%',\r\n        left: '50%',\r\n        right: 'auto',\r\n        bottom: 'auto',\r\n        marginRight: '-50%',\r\n        transform: 'translate(-50%, -50%)'\r\n    }\r\n};\r\n\r\nexport class PasswordReset extends Component {\r\n    state = {\r\n        passFirst: '',\r\n        passSecond: '',\r\n        showModal: false\r\n    };\r\n\r\n    componentDidUpdate() {\r\n        if (!this.props.user) this.props.history.push('/');\r\n    }\r\n\r\n    onInputChange = e => {\r\n        if (e.target) this.setState({ [e.target.name]: e.target.value });\r\n    };\r\n\r\n    onSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        this.props.changePassword(\r\n            this.props.user,\r\n            this.state.passFirst,\r\n            this.state.passSecond,\r\n            () => this.setState({ showModal: true })\r\n        );\r\n    };\r\n\r\n    redirect = () => {\r\n        this.props.history.push('/');\r\n    };\r\n\r\n    render() {\r\n        let loading = (\r\n            <div className=\"u-centered\">\r\n                <Loader />\r\n            </div>\r\n        );\r\n        if (!this.props.isLoading)\r\n            loading = this.props.errorMsg.length ? (\r\n                <h3 className=\"login__msg\">{this.props.errorMsg}</h3>\r\n            ) : null;\r\n\r\n        return (\r\n            <form className=\"login\" onSubmit={this.onSubmit}>\r\n                <h2 className=\"login__title\">Zmień hasło</h2>\r\n                <LoginTextInput\r\n                    type=\"password\"\r\n                    id=\"passFirst\"\r\n                    placeholder=\"Nowe hasło\"\r\n                    onChange={this.onInputChange}\r\n                    label=\"Nowe hasło:\"\r\n                    icon={<IoMdLock className=\"login__icon\" />}\r\n                    required\r\n                />\r\n                <LoginTextInput\r\n                    type=\"password\"\r\n                    id=\"passSecond\"\r\n                    placeholder=\"Nowe hasło\"\r\n                    onChange={this.onInputChange}\r\n                    label=\"Powtórz nowe hasło:\"\r\n                    icon={<IoMdLock className=\"login__icon\" />}\r\n                    required\r\n                />\r\n                {loading}\r\n                <button type=\"submit\" className=\"btn btn--full\">\r\n                    Zmień\r\n                </button>\r\n\r\n                <Modal\r\n                    isOpen={this.state.showModal}\r\n                    style={customStyles}\r\n                    contentLabel=\"Example Modal\"\r\n                    overlayClassName=\"modal__overlay\"\r\n                    onRequestClose={this.redirect}\r\n                >\r\n                    {' '}\r\n                    <div className=\"modal__window\">\r\n                        <h2>Pomyślnie zmieniono hasło!</h2>\r\n                        <div className=\"u-centered\">\r\n                            <Button types={['confirm', 'short']} onClick={this.redirect}>\r\n                                Wróć do strony głównej\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                </Modal>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n    errorMsg: state.error.msg,\r\n    isLoading: state.auth.isLoading\r\n});\r\n\r\nexport default connect(mapStateToProps, { changePassword })(PasswordReset);\r\n","import React, { Component, Fragment } from 'react';\r\nimport QuestionsBox from '../components/QuestionsBox';\r\nimport { Footer } from '../layouts/Footer';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport Login from '../components/Login';\r\nimport NavBar from '../layouts/NavBar';\r\nimport { connect } from 'react-redux';\r\nimport { loadUser } from '../actions/authActions';\r\nimport { auth } from '../firebase';\r\nimport AccountDashboard from './AccountDashboard';\r\nimport AdminDashboard from './AdminDashboard';\r\nimport PasswordReset from '../components/PasswordReset';\r\n\r\nexport class AllQuestionsView extends Component {\r\n    componentDidMount() {\r\n        auth.onAuthStateChanged(user => {\r\n            this.props.loadUser(user);\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <main className=\"main\">\r\n                    <section className=\"questions\">\r\n                        <NavBar />\r\n                        <div className=\"content-container\">\r\n                            <Switch>\r\n                                <Route path=\"/login\" component={Login} />\r\n                                <Route path=\"/account\" component={AccountDashboard} />\r\n                                <Route path=\"/admin\" component={AdminDashboard} />\r\n                                <Route path=\"/change\" component={PasswordReset} />\r\n                                <Route\r\n                                    path=\"/prywatne\"\r\n                                    render={props => <QuestionsBox {...props} type={'private'} />}\r\n                                />\r\n                                <Route\r\n                                    path=\"/recenzje\"\r\n                                    render={props => <QuestionsBox {...props} type={'review'} />}\r\n                                />\r\n                                <Route exact path=\"/\" component={QuestionsBox} />\r\n                                <Route path=\"/pytania\" component={QuestionsBox} />\r\n                                <Route path=\"/index.html\" component={QuestionsBox} />\r\n                                <Route component={QuestionsBox} />\r\n                            </Switch>\r\n                        </div>\r\n                    </section>\r\n                </main>\r\n\r\n                <Footer />\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    isAuthenticated: state.auth.isAuthenticated\r\n});\r\n\r\nexport default connect(mapStateToProps, { loadUser })(AllQuestionsView);\r\n","import {\r\n    USER_LOADING,\r\n    USER_LOADED,\r\n    AUTH_ERROR,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT_SUCCESS,\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL,\r\n    ADMIN_FAIL,\r\n    ADMIN_LOADED,\r\n    PUBLISHER_FAIL,\r\n    PUBLISHER_LOADED,\r\n    UPDATED_PASSWORD,\r\n    USER_UPDATED\r\n} from '../actions/types';\r\n\r\nconst initialState = {\r\n    isAuthenticated: null,\r\n    isLoading: false,\r\n    user: null,\r\n    isAdmin: false,\r\n    isPublisher: false\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n    switch (action.type) {\r\n        case USER_LOADING:\r\n            return {\r\n                ...state,\r\n                isLoading: true\r\n            };\r\n        case USER_LOADED:\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                isAuthenticated: true,\r\n                user: action.payload\r\n            };\r\n        case LOGIN_SUCCESS:\r\n        case REGISTER_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                isAuthenticated: true,\r\n                user: action.payload\r\n            };\r\n        case LOGIN_FAIL:\r\n        case AUTH_ERROR:\r\n        case REGISTER_FAIL:\r\n        case LOGOUT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                user: null,\r\n                isLoading: false,\r\n                isAuthenticated: false,\r\n                isAdmin: false,\r\n                isPublisher: false\r\n            };\r\n        case ADMIN_LOADED:\r\n            return {\r\n                ...state,\r\n                isAdmin: true,\r\n                isPublisher: true,\r\n                isLoading: false\r\n            };\r\n        case PUBLISHER_LOADED:\r\n            return {\r\n                ...state,\r\n                isAdmin: false,\r\n                isPublisher: true,\r\n                isLoading: false\r\n            };\r\n        case ADMIN_FAIL:\r\n            return {\r\n                ...state,\r\n                isAdmin: false,\r\n                isLoading: false\r\n            };\r\n        case PUBLISHER_FAIL:\r\n            return {\r\n                ...state,\r\n                isPublisher: false,\r\n                isAdmin: false,\r\n                isLoading: false\r\n            };\r\n        case UPDATED_PASSWORD: {\r\n            return {\r\n                ...state,\r\n                isLoading: false\r\n            };\r\n        }\r\n        case USER_UPDATED:\r\n            const newUser = { ...state.user, ...action.payload };\r\n\r\n            return {\r\n                ...state,\r\n                user: newUser\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import {\r\n    FETCH_QUESTIONS,\r\n    NEW_PRIVATE_QUESTION,\r\n    NEW_PUBLIC_QUESTION,\r\n    DELETE_QUESTION,\r\n    UPDATE_QUESTION,\r\n    QUESTIONS_LOADING\r\n} from '../actions/types';\r\n\r\nconst initialState = {\r\n    items: [],\r\n    item: {},\r\n    isFetching: false\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n    let newItems = [...state.items];\r\n    switch (action.type) {\r\n        case QUESTIONS_LOADING:\r\n            return {\r\n                ...state,\r\n                isFetching: true\r\n            };\r\n        case FETCH_QUESTIONS:\r\n            return {\r\n                ...state,\r\n                items: action.payload,\r\n                isFetching: false\r\n            };\r\n        case NEW_PRIVATE_QUESTION:\r\n            newItems.push(action.payload);\r\n            return {\r\n                ...state,\r\n                items: newItems,\r\n                item: action.payload,\r\n                isFetching: false\r\n            };\r\n        case NEW_PUBLIC_QUESTION:\r\n            if (!action.payload) return state;\r\n            newItems.push(action.payload);\r\n            return {\r\n                ...state,\r\n                items: newItems,\r\n                item: action.payload,\r\n                isFetching: false\r\n            };\r\n        case DELETE_QUESTION:\r\n            newItems = newItems.filter(el => el.id !== action.payload);\r\n            return {\r\n                ...state,\r\n                items: newItems,\r\n                isFetching: false\r\n            };\r\n        case UPDATE_QUESTION:\r\n            let newItemIndex = newItems.findIndex(el => el.id === action.payload.id);\r\n            newItems[newItemIndex] = {\r\n                ...newItems[newItemIndex],\r\n                ...action.payload.question\r\n            };\r\n            return {\r\n                ...state,\r\n                items: newItems,\r\n                item: newItems[newItemIndex],\r\n                isFetching: false\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { GET_ERRORS, CLEAR_ERRORS } from '../actions/types';\r\n\r\nconst initialState = {\r\n    msg: {},\r\n    status: null,\r\n    id: null\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_ERRORS:\r\n            return {\r\n                msg: action.payload.msg,\r\n                status: action.payload.status,\r\n                id: action.payload.id\r\n            };\r\n        case CLEAR_ERRORS:\r\n            return { ...initialState };\r\n        default: {\r\n            return { ...state };\r\n        }\r\n    }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport authReducer from './authReducer';\r\nimport questionReducer from './questionReducer';\r\nimport errorReducer from './errorReducer';\r\n\r\nexport default combineReducers({\r\n    auth: authReducer,\r\n    questions: questionReducer,\r\n    error: errorReducer\r\n});\r\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nexport const store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    // COMMENT REDUX FOR BUILD!\r\n    compose(\r\n        applyMiddleware(...middleware)\r\n        // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    )\r\n);\r\n","import React from 'react';\r\nimport './assets/sass/main.scss';\r\nimport AllQuestionsView from './views/AllQuestionsView';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './store';\r\n\r\nfunction App() {\r\n    return (\r\n        <Provider store={store}>\r\n            <BrowserRouter>\r\n                <div className=\"App\">\r\n                    <AllQuestionsView />\r\n                </div>\r\n            </BrowserRouter>\r\n        </Provider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './_redirects';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n"],"sourceRoot":""}